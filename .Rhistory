mortgageRate <- 0.04
mortgageLength <- 25
closingBuy <- 0.03
closingSale <- 0.06
paymentFreq <- 1 # Number of payment per month
month <- 12
capGainTax <- 0.15
### Output-----
downTotal <- downDollars + xRateBuy*downEuro
loan <- price*(1+closingBuy) - downTotal
freq <- month * paymentFreq
mortgageMonthPayment <- (loan / ((1 - (1 + mortgageRate / freq) ^ (-month * mortgageLength * paymentFreq)) / (mortgageRate / freq))) * paymentFreq
t <- seq(1, month*paymentFreq*mortgageLength)
b <- rep(loan, month*paymentFreq*mortgageLength)
amortization <- cbind(t, b)
amortization <- as.data.frame(cbind(t, b))
View(amortization)
time <- seq(1, month*paymentFreq*mortgageLength)
balance <- rep(loan, month*paymentFreq*mortgageLength)
amortization <- as.data.frame(cbind(time, balance))
colnames(amortization)
amortization$time <- as.numeric(amortization$time)
str(amortization)
amortization$interest <- 0
View(amortization)
amortization$interest <- balance*mortgageRate/month*paymentFreq
View(amortization)
amortization$principal <- mortgageMonthlyPayment - amortization$interest
amortization$principal <- mortgageMonthPayment - amortization$interest
View(amortization)
?apply
nrows(amortization)
nrow(amortization)
amortization[1, 'balance'] - amortization[1, 'principal']
amortization[2, 'balance'] * mortgageRate/month*paymentFreq
for (i in 2:nrow(amortization)) {
amortization[i, 'balance'] <- amortization[i-1, 'balance'] - amortization[i-1, 'principal']
amortization[i, 'interest'] <- amortization[i, 'balance'] * mortgageRate/month*paymentFreq
amortization[i, 'principal'] <- mortgageMonthPayment - amortization[i, 'interest']
}
View(amortization)
downDollars <- 65000
downEuro <- 50000
# Exchange rate
xRateBuy <- 1.2
xBRateSale <- 1.1
# Home
price <- 500000
condoFee <- 140
renov <- 0.5
insurance <- 0.5
utility <- 100
propTax <- 0.008
#Intermediaries
mortgageRate <- 0.04
mortgageLength <- 25
closingBuy <- 0.03
closingSale <- 0.06
paymentFreq <- 1 # Number of payment per month
month <- 12
capGainTax <- 0.15
### Output-----
downTotal <- downDollars + xRateBuy*downEuro
loan <- price*(1+closingBuy) - downTotal
freq <- month * paymentFreq
mortgageMonthPayment <- (loan / ((1 - (1 + mortgageRate / freq) ^ (-month * mortgageLength * paymentFreq)) / (mortgageRate / freq))) * paymentFreq
### Create a data frame for loan amortization
time <- seq(1, month*paymentFreq*mortgageLength)
balance <- rep(loan, month*paymentFreq*mortgageLength)
amortization <- as.data.frame(cbind(time, balance))
colnames(amortization)
str(amortization)
amortization$time <- as.numeric(amortization$time)
amortization$interest <- balance*mortgageRate/month*paymentFreq
amortization$principal <- mortgageMonthPayment - amortization$interest
for (i in 2:nrow(amortization)) {
amortization[i, 'balance'] <- amortization[i-1, 'balance'] - amortization[i-1, 'principal']
amortization[i, 'interest'] <- amortization[i, 'balance'] * mortgageRate/month*paymentFreq
amortization[i, 'principal'] <- mortgageMonthPayment - amortization[i, 'interest']
}
View(amortization)
priceSale <- 500000
amortization$benefit <- price - amortization$balance
amortization$cashSale <- priceSale - (priceSale - price) * capGainTax -
priceSale * closingSale - amortization$balance
View(amortization)
ggplot(amortization, aes(x = time, y = cashSale)) +
geom_line()
library(ggplot2)
ggplot(amortization, aes(x = time, y = cashSale)) +
geom_line()
downDollars <- 0
downEuro <- 0
# Exchange rate
xRateBuy <- 1.2
xBRateSale <- 1.1
# Home
price <- 500000
priceSale <- 500000
condoFee <- 140
renov <- 0.5
insurance <- 0.5
utility <- 100
propTax <- 0.008
#Intermediaries
mortgageRate <- 0.04
mortgageLength <- 25
closingBuy <- 0.03
closingSale <- 0.06
paymentFreq <- 1 # Number of payment per month
month <- 12
capGainTax <- 0.15
### Output-----
downTotal <- downDollars + xRateBuy*downEuro
loan <- price*(1+closingBuy) - downTotal
freq <- month * paymentFreq
mortgageMonthPayment <- (loan / ((1 - (1 + mortgageRate / freq) ^ (-month * mortgageLength * paymentFreq)) / (mortgageRate / freq))) * paymentFreq
### Create a data frame for loan amortization
time <- seq(1, month*paymentFreq*mortgageLength)
balance <- rep(loan, month*paymentFreq*mortgageLength)
amortization <- as.data.frame(cbind(time, balance))
colnames(amortization)
str(amortization)
amortization$time <- as.numeric(amortization$time)
amortization$interest <- balance*mortgageRate/month*paymentFreq
amortization$principal <- mortgageMonthPayment - amortization$interest
for (i in 2:nrow(amortization)) {
amortization[i, 'balance'] <- amortization[i-1, 'balance'] - amortization[i-1, 'principal']
amortization[i, 'interest'] <- amortization[i, 'balance'] * mortgageRate/month*paymentFreq
amortization[i, 'principal'] <- mortgageMonthPayment - amortization[i, 'interest']
}
amortization$cashSale <- priceSale - (priceSale - price) * capGainTax -
priceSale * closingSale - amortization$balance
ggplot(amortization, aes(x = time, y = cashSale)) +
geom_line()
View(amortization)
View(amortization)
downDollars <- 0
downEuro <- 0
# Exchange rate
xRateBuy <- 1.2
xBRateSale <- 1.1
# Home
price <- 500000
priceSale <- 500000
condoFee <- 140
renov <- 0.5
insurance <- 0.5
utility <- 100
propTax <- 0.008
#Intermediaries
mortgageRate <- 0.04
mortgageLength <- 25
closingBuy <- 0.03
closingSale <- 0.1
paymentFreq <- 1 # Number of payment per month
month <- 12
capGainTax <- 0.15
### Output-----
downTotal <- downDollars + xRateBuy*downEuro
loan <- price*(1+closingBuy) - downTotal
freq <- month * paymentFreq
mortgageMonthPayment <- (loan / ((1 - (1 + mortgageRate / freq) ^ (-month * mortgageLength * paymentFreq)) / (mortgageRate / freq))) * paymentFreq
### Create a data frame for loan amortization
time <- seq(1, month*paymentFreq*mortgageLength)
balance <- rep(loan, month*paymentFreq*mortgageLength)
amortization <- as.data.frame(cbind(time, balance))
colnames(amortization)
str(amortization)
amortization$time <- as.numeric(amortization$time)
amortization$interest <- balance*mortgageRate/month*paymentFreq
amortization$principal <- mortgageMonthPayment - amortization$interest
for (i in 2:nrow(amortization)) {
amortization[i, 'balance'] <- amortization[i-1, 'balance'] - amortization[i-1, 'principal']
amortization[i, 'interest'] <- amortization[i, 'balance'] * mortgageRate/month*paymentFreq
amortization[i, 'principal'] <- mortgageMonthPayment - amortization[i, 'interest']
}
amortization$cashSale <- priceSale - (priceSale - price) * capGainTax -
priceSale * closingSale - amortization$balance
ggplot(amortization, aes(x = time, y = cashSale)) +
geom_line()
View(amortization)
install.packages("rgoogledocs")
install.packages("RGoogleDocs")
library(OpenStreetMap)
library("rJava", lib.loc="C:/Users/Tony/Documents/R/win-library/2.15")
map <- openmap(c(70,-179), c(-70,179))
library(OpenStreetMap)
library(rgdal)
map <- openmap(c(70,-179), c(-70,179))
library(UScensus2000)
install.packages("UScensus2010")
library(UScensus2010)
data(california.tract)
install.packages("UScensus2000tract")
library(UScensus2000tract)
data(california.tract)
fix(california.tract)
lat <- c(43.834526782236814,30.334953881988564)
lon <- c(-131.0888671875 ,-107.8857421875)
california.tract <- spTransform(california.tract,osm())
library(maps)
library(mapdata)
library(maptools)
install.packages("mapdata")
library(maps)
library(mapdata)
library(maptools)
wrld = map("world", interior = FALSE, plot = FALSE)
fix(wrld)
wrld = pruneMap(wrld)
?pruneMap
fix(wrld)
wrld[[1]]
length(wrld)
wrld[[2]]
wrld[[3]]
wrld[[4]]
wrld.sp = map2SpatialLines(wrld, proj4string = CRS("+init=epsg:4326"))
fix(wrld.sp)
INSP.prj = CRS("+init=epsg:3035")
fix(INSP.prj)
wrld_grd = gridlines(wrld.sp, easts=seq(-180,160,10), norths=seq(-50,90,10), ndiscr=100)
library(rgdal)
wrld.sp = spTransform(wrld.sp, INSP.prj)
fix(wrld.sp)
wrld_grd = spTransform(wrld_grd, INSP.prj)
plot(wrld_grd, xlim= c(0, 1e7), ylim = c(0, 1e7), col = 'grey')
lines(wrld.sp)
box()
title("Figure 1 (p13) Annoni report")
tst = SpatialPoints(data.frame(x=c(5,5),y=c(50,60)))
tst = SpatialPoints(data.frame(x=c(5,5),y=c(50,60)))
fix(tst)
tst[1]
class(tst)
length(tst)
tst[1]
tst[2]
proj4string(tst) = CRS("+init=epsg:4326")
tst
spTransform(tst, CRS("+init=epsg:3035"))
install.packages("colorspace")
require(colorspace)
example(colorspace)
rainbow_hcl(n, c = 50, l = 70, start = 0, end = 360*(n-1)/n, ...
)
rainbow_hcl(n, c = 50, l = 70, start = 0, end = 360*(n-1)/n)
pal(rainbow_hcl(4, start = 30, end = 300), main = "dynamic
")
rainbow_hcl(4, start = 30, end = 300)
pal <- function(col, border = "light gray", ...)
{
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
+ axes = FALSE, xlab = "", ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal <- function(col, border = "light gray", ...) {
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
+ axes = FALSE, xlab = "", ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal <- function(col, border = "light gray", ...) {
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(rainbow_hcl(4, start = 30, end = 300))
pal(rainbow_hcl(4, start = 60, end = 240), main = "harmoni
c")
pal(rainbow_hcl(4, start = 270, end = 150), main = "cold")
pal(rainbow_hcl(4, start = 90, end = -30), main = "warm")
pal(sequential_hcl(12, c = 0, power = 2.2))
pal(sequential_hcl(12, power = 2.2))
pal(heat_hcl(12, c = c(80, 30), l = c(30, 90), power = c(1/5, 2)))
pal(terrain_hcl(12, c = c(65, 0), l = c(45, 90), power = c(1/2, 1.5)))
pal(rev(heat_hcl(12, h = c(0, -100), c = c(40, 80), l = c(75, 40),power = 1)))
library("RColorBrewer", lib.loc="C:/Users/Tony/Documents/R/win-library/2.15")
example(RColorBrewer)
install.packages("formatR")
require(formatR)
example(formatR)
require(ggplot2)
data(movies)
View(movies)
df <- subset(movies, rating > 7.5)
View(df)
df <- subset(df, year > 2000)
df <- subset(df, votes > 200)
View(df)
df <- subset(df, short != 1)
df <- subset(df, Short != 1)
action <- subset(df, Action == 1)
View(action)
comedy <- subset(df, Comedy == 1)
View(comedy)
require(quantmod)
require(rCharts)
install.packages("rCharts")
require(devtools)
install.packages("Rtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
require(quantmod)
USbondssymbols <- paste0("DGS",c(1,2,3,5,7,10,20,30))
ust.xts <- xts()
ust.xts <- xts()
for (i in 1:length( USbondssymbols ) ) {
ust.xts <- merge(
ust.xts,
getSymbols(
USbondssymbols[i], auto.assign = FALSE,src = "FRED"
)
)
}
xtsMelt <- function(data) {
require(reshape2)
#translate xts to time series to json with date and data
#for this behavior will be more generic than the original
#data will not be transformed, so template.rmd will be changed to reflect
#convert to data frame
data.df <- data.frame(cbind(format(index(data),"%Y-%m-%d"),coredata(data)))
colnames(data.df)[1] = "date"
data.melt <- melt(data.df,id.vars=1,stringsAsFactors=FALSE)
colnames(data.melt) <- c("date","indexname","value")
#remove periods from indexnames to prevent javascript confusion
#these . usually come from spaces in the colnames when melted
data.melt[,"indexname"] <- apply(matrix(data.melt[,"indexname"]),2,gsub,pattern="[.]",replacement="")
return(data.melt)
#return(df2json(na.omit(data.melt)))
}
ust.melt <- na.omit( xtsMelt( ust.xts["2012::",] ) )
ust.melt$date <- format(as.Date(ust.melt$date))
ust.melt$value <- as.numeric(ust.melt$value)
ust.melt$indexname <- factor(
ust.melt$indexname, levels = colnames(ust.xts)
)
ust.melt$maturity <- as.numeric(
substr(
ust.melt$indexname, 4, length( ust.melt$indexname ) - 4
)
)
ust.melt$country <- rep( "US", nrow( ust.melt ))
d1 <- dPlot(
value ~ date, #or x="date", y="value"
#dimplejs allows filtering but will lessen data to write
#if we subset in R
data = subset(ust.melt,maturity==10), #get all data for 10y maturity
type = 'line'
)
d1
d1 <- dPlot(
value ~ date, #or x="date", y="value"
#dimplejs allows filtering but will lessen data to write
#if we subset in R
data = subset(ust.melt,maturity==10), #get all data for 10y maturity
type = 'line'
)
d1
d2 <- d1
d2$field(
'templates',
modifyList(d2$templates, list(id = "chart2", script = 'http://timelyportfolio.github.io/rCharts_dimple/assets/chart_d3dateaxis.html') )
)
d2
d3 <- dPlot(
value ~ date, #or x="date", y="value"
groups = 'maturity',
data = ust.melt, #get all maturities so remove subset from above
type = 'line'
)
d3$legend( x = 60, y = 10, width = 620, height = 20,
horizontalAlign = "right")
d3$field(
'templates',
modifyList(d3$templates, list(id = "chart3", script = 'http://timelyportfolio.github.io/rCharts_dimple/assets/chart_d3dateaxis.html') )
)
d3
library(shiny)
runExample("01_hello")
setwd("C:/Users/Tony/Dropbox/R test/Maps/walmart")
options(stringsAsFactors = FALSE)
### Load libraries----
library(ggplot2)
library(maps)
library(plyr)
library(grid)
library(maptools)
library(rgdal)
library(lubridate)
library(maps)
gpclibPermit()
### load addresses data----
source('./scripts/load.r')
min(geoc$lat)
max(geoc$lat)
min(geoc$long)
max(geoc$long)
source('./scripts/functions.r')
us <- map_data("state") #col="black",
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
p
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
#ggsave(filename = './charts/testMap2.pdf', width = 133.65, height = 112.5, units = 'cm', limitsize=FALSE)
source('./scripts/functions.r')
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
View(geoc)
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
#gg
source('./scripts/functions.r')
p <- myMap(us, geocCumulative)
p <- p + facet_wrap( ~ year )
#p
#ggsave(filename = './charts/testMap.png', width = 89.1, height = 75, units = 'cm')
ggsave(filename = './output/charts/walmart7.png', width = 65, height = 40, units = 'cm')
setwd("C:/Users/Tony/Dropbox/myGit/smallMultiples")
options(stringsAsFactors = FALSE)
### Load libraries----
library(ggplot2)
library(maps)
library(plyr)
library(grid)
library(maptools)
library(rgdal)
library(lubridate)
library(maps)
gpclibPermit()
### load addresses data----
source('./scripts/load.r')
us <- map_data("state")
myMap(us, geocCumulative)
source('./scripts/functions.r')
myMap(us, geocCumulative)
options(stringsAsFactors = FALSE)
### Load libraries----
library(ggplot2)
library(maps)
library(plyr)
library(grid)
library(maptools)
library(rgdal)
library(lubridate)
library(maps)
gpclibPermit()
### load addresses data----
source('./scripts/load.r')
### load custom functions data----
source('./scripts/functions.r')
### Create map
source('./scripts/analysis.r')
options(stringsAsFactors = FALSE)
### Load libraries----
library(ggplot2)
library(maps)
library(plyr)
library(grid)
library(maptools)
library(rgdal)
library(lubridate)
library(maps)
gpclibPermit()
### load addresses data----
source('./scripts/load.r')
### load custom functions data----
source('./scripts/functions.r')
### Create map
source('./scripts/analysis.r')
